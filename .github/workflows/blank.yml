# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  shared-build-number:
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ steps.increment_build_number.outputs.result }}
    steps:
      - name: Increment Github Build Version ${{ steps.increment_build_number.outputs.result }}
        id: increment_build_number
        if: ${{ !inputs.build_number }}
        uses: actions/github-script@v6
        env:
          APP_NAME: ${{ steps.app_info.outputs.name }}
          APP_SCHEME: ${{ steps.app_info.outputs.scheme }}
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const { owner, repo } = context.repo;
            const { APP_NAME, APP_SCHEME } = process.env;

            async function bumpBuildNumber() {
              const variableResponse = await github.request('GET /repos/{owner}/{repo}/actions/variables/{name}', {
                owner,
                repo,
                name: 'BUILD_NUMBER',
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28'
                }
              });
  
              const nextBuildNumber = parseInt(variableResponse.data.value) + 1;
  
              await github.request('PATCH /repos/{owner}/{repo}/actions/variables/{name}', {
                owner,
                repo,
                name: 'BUILD_NUMBER',
                value: nextBuildNumber.toString(),
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28'
                }
              });

              return nextBuildNumber;
            }

            async function createTag(appName, scheme, buildNumber) {
              const tagName = `${appName.toLowerCase()}/github/${scheme.toLowerCase()}/${buildNumber}`;
              const newTag = await github.rest.git.createTag({
                owner, 
                repo,
                tag: tagName, object: context.sha, message: "", type: "commit"
              });

              await github.rest.git.createRef({
                owner, 
                repo,
                ref: `refs/tags/${tagName}`, sha: newTag.data.sha
              })
            }

            try {
              const buildNumber = await bumpBuildNumber();

              await createTag(APP_NAME, APP_SCHEME, buildNumber);

              return buildNumber;
            } catch (error) {
              if (!error?.response?.data?.message.includes("Reference already exists")) {
                throw error;
              }
              const buildNumber = await bumpBuildNumber();

              await createTag(APP_NAME, APP_SCHEME, buildNumber);

              return buildNumber;
            }
